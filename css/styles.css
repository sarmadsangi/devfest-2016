/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

input,
textarea {
  box-sizing: border-box; }

label {
  box-sizing: border-box; }

/*! HiDPI v2.0.1 | MIT License | git.io/hidpi */
@font-face {
  font-family: 'Ampersand';
  src: local("Baskerville-Italic"), local("GoudyOldStyleT-Italic"), local("Palatino-Italic"), local("Garamond-Italic");
  unicode-range: U+26; }

html {
  box-sizing: border-box; }

*,
*:before,
*:after {
  box-sizing: inherit; }

h1,
h2,
h3,
h4,
h5,
h6,
ul,
li,
p,
blockquote {
  padding: 0;
  margin: 0; }

h1,
h2,
h3,
h4,
h5,
h6 {
  display: block; }

li {
  list-style: none; }

input,
textarea,
button {
  border: 0;
  border-radius: 0;
  outline: none;
  appearance: none;
  -moz-appearance: none;
  -webkit-appearance: none; }
  input:hover, input:active, input:focus,
  textarea:hover,
  textarea:active,
  textarea:focus,
  button:hover,
  button:active,
  button:focus {
    outline: none; }

embed,
iframe,
img,
object,
video {
  max-width: 100%; }

table {
  width: 100%;
  table-layout: fixed; }

p + *,
* + p {
  margin-top: 1.05rem; }

article ul,
article ol {
  padding-left: 1.7rem; }

article li + li {
  margin-top: 0.35rem; }

article ul li {
  list-style-type: disc; }

article ol li {
  list-style-type: decimal; }

article * + h2 {
  margin-top: 2.1rem; }

article h2 + p {
  margin-top: 0.35rem; }

.button,
.btn,
.button--secondary,
.btn--secondary {
  color: white;
  display: inline-block;
  text-align: center;
  padding: 0.55em 1em 0.75em;
  font-weight: bold;
  line-height: 1.2;
  background: #ff414a;
  text-decoration: none;
  transition: background 0.15s ease-in; }
  .button:hover, .button:active, .button:focus,
  .btn:hover,
  .button--secondary:hover,
  .btn--secondary:hover,
  .btn:active,
  .button--secondary:active,
  .btn--secondary:active,
  .btn:focus,
  .button--secondary:focus,
  .btn--secondary:focus {
    transition: background 0.15s ease-out;
    background: #222242; }
  .button--secondary,
  .btn--secondary {
    background: #707d98;
    background: #395a9c; }

@media all and (max-width: 21.8125em) {
  .btn + .btn, .button--secondary + .btn,
  .btn--secondary + .btn, .btn + .button--secondary, .button--secondary + .button--secondary,
  .btn--secondary + .button--secondary, .btn +
  .btn--secondary, .button--secondary +
  .btn--secondary,
  .btn--secondary +
  .btn--secondary {
    margin-top: 0.7rem; } }

@media all and (min-width: 21.875em) {
  .btn + .btn, .button--secondary + .btn,
  .btn--secondary + .btn, .btn + .button--secondary, .button--secondary + .button--secondary,
  .btn--secondary + .button--secondary, .btn +
  .btn--secondary, .button--secondary +
  .btn--secondary,
  .btn--secondary +
  .btn--secondary {
    margin-left: 0.35rem; } }

section {
  margin: 3.5rem 0; }
  @media all and (min-width: 93.75em) {
    section {
      margin: 7rem 0; } }

.s--colored {
  margin: 0;
  padding: 3.5rem 0; }
  @media all and (min-width: 93.75em) {
    .s--colored {
      padding: 7rem 0; } }

.s--small.s--colored {
  padding: 2.8rem 0;
  text-align: center; }

.s--small p {
  max-width: 20rem;
  margin-right: auto;
  margin-left: auto; }

.s__sunglow {
  background: #ffc937; }

.s__midnight {
  background: #222242;
  color: #fff;
  color: #fff; }

.s__gray {
  background: #f6f6f6; }

html {
  font-size: 100%;
  line-height: 1.4;
  font-family: "acumin-pro-semi-condensed", Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 500;
  color: #111;
  text-rendering: optimizeLegibility;
  font-variant-ligatures: common-ligatures; }
  @media all and (min-width: 350px) {
    html {
      font-size: 106.25%; } }
  @media all and (min-width: 680px) {
    html {
      font-size: 106.25%; } }
  @media all and (min-width: 900px) {
    html {
      font-size: 131.25%; } }

.h1 {
  font-family: "Ampersand", "Adelle Condensed", "adelle-condensed", Helvetica, Arial, sans-serif;
  font-size: 1.95312rem;
  line-height: 1.25;
  font-weight: 500; }
  @media all and (min-width: 680px) {
    .h1 {
      font-size: 2.36859rem;
      line-height: 1.25; } }
  @media all and (max-width: 21.8125em) {
    .h1,
    .h1 + .subtitle {
      text-align: center; } }

.h2 {
  font-size: 1.25rem;
  line-height: 1.25;
  font-family: "Ampersand", "Adelle Condensed", "adelle-condensed", Helvetica, Arial, sans-serif;
  font-weight: 500; }
  @media all and (min-width: 680px) {
    .h2 {
      font-size: 1.333rem;
      line-height: 1.25; } }
  @media all and (min-width: 900px) {
    .h2 {
      font-size: 1.333rem;
      line-height: 1.25; } }

.h3 {
  font-family: "Ampersand", "acumin-pro-condensed", Helvetica, Arial, sans-serif;
  font-size: 1.25rem;
  line-height: 1.25; }
  @media all and (min-width: 680px) {
    .h3 {
      font-size: 1.333rem;
      line-height: 1.25; } }
  @media all and (min-width: 900px) {
    .h3 {
      font-size: 1.333rem;
      line-height: 1.25; } }

.h4 {
  font-family: "Ampersand", "acumin-pro-condensed", Helvetica, Arial, sans-serif;
  font-size: 1.2rem;
  line-height: 1.25; }
  @media all and (min-width: 680px) {
    .h4 {
      font-size: 1.12528rem;
      line-height: 1.25; } }

strong {
  font-weight: bold; }

em {
  font-style: italic; }

.title {
  font-family: "Ampersand", "Adelle Condensed", "adelle-condensed", Helvetica, Arial, sans-serif;
  font-size: 1.95312rem;
  line-height: 1.2;
  font-weight: 500;
  max-width: 50rem;
  margin-right: auto;
  margin-left: auto; }
  @media all and (min-width: 680px) {
    .title {
      font-size: 3.15733rem;
      line-height: 1.15; } }

.subtitle {
  font-family: "Ampersand", "acumin-pro-condensed", Helvetica, Arial, sans-serif;
  color: rgba(0, 0, 0, 0.5);
  font-weight: 500; }

.subheader {
  font-family: "Ampersand", "acumin-pro-condensed", Helvetica, Arial, sans-serif;
  font-weight: 700; }

.small {
  font-size: 0.96rem; }
  @media all and (min-width: 680px) {
    .small {
      font-size: 0.84417rem; } }

.wrap {
  max-width: 35rem;
  padding-left: 1.4rem;
  padding-right: 1.4rem; }
  @media all and (min-width: 42.5em) {
    .wrap {
      margin: auto;
      padding-left: 0;
      padding-right: 0; } }

.wrap--large {
  max-width: 45rem;
  margin-right: auto;
  margin-left: auto;
  padding-left: 1.4rem;
  padding-right: 1.4rem; }
  @media all and (min-width: 59.375em) {
    .wrap--large {
      padding-left: 0;
      padding-right: 0; } }
  @media all and (min-width: 93.75em) {
    .wrap--large {
      max-width: 50rem; } }

.wrap--flex {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  max-width: 45rem;
  margin-right: auto;
  margin-left: auto;
  padding-left: 1.4rem;
  padding-right: 1.4rem; }
  @media all and (min-width: 59.375em) {
    .wrap--flex {
      padding-left: 0;
      padding-right: 0; } }
  @media all and (min-width: 93.75em) {
    .wrap--flex {
      max-width: 50rem; } }

.l-g2 {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
      -ms-flex-flow: column;
          flex-flow: column; }
  .l-g2 > * + * {
    margin-top: 1.4rem; }
  @media all and (min-width: 31.25em) {
    .l-g2 {
      -webkit-flex-flow: row;
          -ms-flex-flow: row;
              flex-flow: row;
      margin-left: -0.7rem;
      margin-right: -0.7rem; }
      .l-g2 > * {
        margin: 0 0.7rem;
        -webkit-flex-basis: calc(50% - 1.4rem);
            -ms-flex-preferred-size: calc(50% - 1.4rem);
                flex-basis: calc(50% - 1.4rem); } }

.logo {
  height: 2.1rem;
  width: auto; }

nav {
  background: black; }

nav .wrap--flex {
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-align-items: center;
      -ms-flex-align: center;
              -ms-grid-row-align: center;
          align-items: center;
  padding-top: 0.7rem;
  padding-bottom: 0.7rem;
  font-size: 0.8rem;
  line-height: 1;
  color: white; }
  @media all and (min-width: 680px) {
    nav .wrap--flex {
      font-size: 0.75019rem;
      line-height: 1; } }
  @media all and (min-width: 900px) {
    nav .wrap--flex {
      font-size: 0.75019rem; } }

nav a {
  color: white;
  text-decoration: none;
  display: inline-block;
  vertical-align: middle;
  margin-left: 1.05rem;
  font-weight: bold; }

.nav__mobile {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  color: white;
  cursor: pointer; }
  .nav__mobile span {
    position: relative;
    top: -0.1em;
    margin-right: 0.5em; }
  .nav__mobile svg {
    color: white;
    width: 1.4rem;
    height: 1.26rem; }

.canvas {
  overflow-x: hidden; }

.canvas__off {
  position: fixed;
  right: -14rem;
  top: 0;
  bottom: 0;
  width: 14rem;
  background: black;
  z-index: 10;
  transition: -webkit-transform 0.4s ease-out;
  transition: transform 0.4s ease-out;
  transition: transform 0.4s ease-out, -webkit-transform 0.4s ease-out; }
  .canvas.is-shown .canvas__off {
    -webkit-transform: translateX(-14rem);
            transform: translateX(-14rem); }
  .canvas__off a:not(.btn):not(.button--secondary):not(
  .btn--secondary) {
    display: block;
    color: white;
    text-decoration: none;
    padding: 0.7rem 1.4rem; }
  .canvas__off a,
  .canvas__off a:hover,
  .canvas__off a:active,
  .canvas__off a:focus {
    transition: background 0s linear; }
  .canvas__off a:hover {
    background: #395a9c; }
  .canvas__off a + a:not(.btn):not(.button--secondary):not(
  .btn--secondary) {
    border-top: 1px solid #555; }
  .canvas__off .btn, .canvas__off .button--secondary, .canvas__off
  .btn--secondary {
    display: block; }

.canvas__on {
  transition: -webkit-transform 0.4s ease-out;
  transition: transform 0.4s ease-out;
  transition: transform 0.4s ease-out, -webkit-transform 0.4s ease-out; }

.canvas.is-shown .canvas__on {
  -webkit-transform: translate3d(-14rem, 0, 0);
          transform: translate3d(-14rem, 0, 0); }

.logo {
  font-family: "Ampersand", "Adelle Condensed", "adelle-condensed", Helvetica, Arial, sans-serif;
  font-family: 'acumin-pro-extra-condensed';
  font-weight: bold;
  font-size: 1.5rem;
  line-height: 1.5;
  position: relative;
  top: -0.1em; }
  @media all and (min-width: 680px) {
    .logo {
      font-size: 1.5rem;
      line-height: 1.5; } }

.Intro {
  position: relative;
  color: white;
  padding-top: 4.9rem;
  padding-bottom: 4.9rem; }
  @media all and (min-width: 93.75em) {
    .Intro {
      padding-top: 7rem;
      padding-bottom: 7rem; } }

.Intro__bg {
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  z-index: -1;
  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0.25)), url("../images/developer.jpg");
  background-repeat: no-repeat;
  background-size: cover;
  background-position: 50% 0%;
  text-shadow: 0 1px 0 black, 0 0 15px rgba(0, 0, 0, 0.45);
  -webkit-filter: blur(5px);
          filter: blur(5px); }

.Intro__overlay {
  margin: -2.8rem;
  padding: 2.8rem; }

.Intro__content {
  max-width: 35rem; }

.Intro__cta {
  margin-top: 2.1rem; }

.About {
  position: relative; }

.About__img {
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  display: block;
  background-image: url("../images/cohort-logo-icon.svg");
  background-repeat: no-repeat;
  background-size: contain;
  background-position: calc(100% + 5.6rem) calc(100% + 4.2rem);
  opacity: 0.05; }

.why {
  overflow-x: hidden; }

.why__item, .why__item--first {
  position: relative;
  margin-top: 2.1rem; }
  @media all and (min-width: 42.5em) {
    .why__item, .why__item--first {
      padding-left: 0;
      padding-right: 0; } }
  @media all and (min-width: 21.875em) {
    .why__item + .why__item, .why__item--first + .why__item, .why__item + .why__item--first, .why__item--first + .why__item--first {
      margin-top: 2.8rem; } }
  @media all and (min-width: 42.5em) {
    .why__item + .why__item, .why__item--first + .why__item, .why__item + .why__item--first, .why__item--first + .why__item--first {
      margin-top: 5.6rem; } }
  .why__item .why__grid, .why__item--first .why__grid {
    margin-top: 1.4rem; }
    @media all and (min-width: 31.25em) {
      .why__item .why__grid, .why__item--first .why__grid {
        margin-top: 0;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-flow: row;
            -ms-flex-flow: row;
                flex-flow: row;
        -webkit-align-items: center;
            -ms-flex-align: center;
                align-items: center;
        margin-left: -1.05rem;
        margin-right: -1.05rem; }
        .why__item .why__grid > *, .why__item--first .why__grid > * {
          margin: 0 1.05rem; }
        .why__item .why__grid > div:nth-child(1), .why__item--first .why__grid > div:nth-child(1) {
          -webkit-flex-basis: calc(25% - 2.1rem);
              -ms-flex-preferred-size: calc(25% - 2.1rem);
                  flex-basis: calc(25% - 2.1rem); }
        .why__item .why__grid > div:nth-child(2), .why__item--first .why__grid > div:nth-child(2) {
          -webkit-flex-basis: calc(75% - 2.1rem);
              -ms-flex-preferred-size: calc(75% - 2.1rem);
                  flex-basis: calc(75% - 2.1rem); } }
    @media all and (min-width: 42.5em) {
      .why__item .why__grid, .why__item--first .why__grid {
        margin-left: -2.1rem;
        margin-right: -2.1rem; }
        .why__item .why__grid > *, .why__item--first .why__grid > * {
          margin: 0 2.1rem; }
        .why__item .why__grid > div:nth-child(1), .why__item--first .why__grid > div:nth-child(1) {
          -webkit-flex-basis: calc(37.5% - 4.2rem);
              -ms-flex-preferred-size: calc(37.5% - 4.2rem);
                  flex-basis: calc(37.5% - 4.2rem); }
        .why__item .why__grid > div:nth-child(2), .why__item--first .why__grid > div:nth-child(2) {
          -webkit-flex-basis: calc(62.5% - 4.2rem);
              -ms-flex-preferred-size: calc(62.5% - 4.2rem);
                  flex-basis: calc(62.5% - 4.2rem); } }
  .why__item svg, .why__item--first svg {
    width: 11.2rem;
    height: 11.2rem; }
    @media all and (min-width: 31.25em) {
      .why__item svg, .why__item--first svg {
        width: 20vw;
        height: 20vw; } }

@media all and (max-width: 31.1875em) {
  .why__title {
    text-align: center; } }

.why__image {
  float: left;
  margin-right: 0.7rem; }
  @media all and (min-width: 31.25em) {
    .why__image {
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-flex-flow: column;
          -ms-flex-flow: column;
              flex-flow: column;
      -webkit-align-items: center;
          -ms-flex-align: center;
              align-items: center;
      -webkit-justify-content: center;
          -ms-flex-pack: center;
              justify-content: center;
      float: none; } }

.flip {
  -webkit-transform: scaleX(-1);
          transform: scaleX(-1); }

@media all and (min-width: 31.25em) {
  .why__item:nth-child(even) .why__image, .why__item--first:nth-child(even) .why__image {
    -webkit-order: 3;
        -ms-flex-order: 3;
            order: 3; }
  .why__item:nth-child(even) .why__content, .why__item--first:nth-child(even) .why__content {
    -webkit-order: 0;
        -ms-flex-order: 0;
            order: 0; }
  .why__item:nth-child(odd) .why__image, .why__item--first:nth-child(odd) .why__image {
    -webkit-order: 0;
        -ms-flex-order: 0;
            order: 0; }
  .why__item:nth-child(odd) .why__content, .why__item--first:nth-child(odd) .why__content {
    -webkit-order: 3;
        -ms-flex-order: 3;
            order: 3; } }

.why__item--first {
  margin-top: 0; }

.why .why__item--first .why__image {
  display: none; }

.why .why__item--first .why__content {
  text-align: left;
  -webkit-flex-basis: 50%;
      -ms-flex-preferred-size: 50%;
          flex-basis: 50%; }

.tuition .small {
  margin-top: 0.7rem;
  max-width: 30em;
  margin-right: auto;
  margin-left: auto;
  color: #999; }

.tuition__table {
  margin-top: 2.1rem; }

.tuition__price, .tuition__price--secondary {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
      -ms-flex-flow: column;
          flex-flow: column;
  text-align: center;
  padding: 1.4rem;
  border: 0.175rem solid #ddd;
  background: white;
  color: #ff414a;
  text-decoration: none;
  transition: border 0.15s ease-out, background 0.15s ease-out; }
  @media all and (min-width: 21.875em) {
    .tuition__price, .tuition__price--secondary {
      padding: 2.8rem 0; } }
  .tuition__price:hover, .tuition__price--secondary:hover, .tuition__price:active, .tuition__price--secondary:active, .tuition__price:focus, .tuition__price--secondary:focus {
    border-color: #ff414a;
    background: white;
    transition: border 0.15s ease-in, background 0.15s ease-in; }
  .tuition__price .tuition__title:after, .tuition__price--secondary .tuition__title:after {
    content: '';
    display: block;
    width: 1.4rem;
    height: 0.175rem;
    margin: 1.4rem auto 0.7rem;
    background: #ff414a; }
  .tuition__price ul, .tuition__price--secondary ul {
    -webkit-flex-grow: 1;
        -ms-flex-positive: 1;
            flex-grow: 1;
    max-width: 16.8rem;
    margin-right: auto;
    margin-left: auto;
    margin-top: 0.7rem;
    padding: 0;
    padding-left: 3.08rem;
    padding-right: 1.96rem;
    text-align: left;
    font-size: 0.96rem; }
    @media all and (min-width: 680px) {
      .tuition__price ul, .tuition__price--secondary ul {
        font-size: 0.84417rem; } }
  .tuition__price li, .tuition__price--secondary li {
    list-style-type: disc;
    margin: 0;
    padding: 0; }
  .tuition__price li + li, .tuition__price--secondary li + li {
    margin-top: 0.35rem; }
  .tuition__price .btn, .tuition__price--secondary .btn, .tuition__price .button--secondary, .tuition__price--secondary .button--secondary, .tuition__price
  .btn--secondary, .tuition__price--secondary
  .btn--secondary {
    display: inline-block;
    margin-top: 0.7rem; }

.tuition__price--secondary {
  color: #395a9c; }
  .tuition__price--secondary:hover, .tuition__price--secondary:active, .tuition__price--secondary:focus {
    border-color: #395a9c; }
  .tuition__price--secondary .tuition__title:after {
    background: #395a9c; }

.Instructor, .Instructor--flip {
  display: block;
  margin-top: 1.05rem; }
  @media all and (max-width: 31.1875em) {
    .Instructor > div:nth-child(1), .Instructor--flip > div:nth-child(1) {
      float: left;
      max-width: 8.4rem;
      margin-right: 1.05rem;
      margin-bottom: 1.05rem; } }
  @media all and (min-width: 31.25em) {
    .Instructor, .Instructor--flip {
      margin-top: 1.75rem;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      margin-left: -1.05rem;
      margin-right: -1.05rem; }
      .Instructor > div, .Instructor--flip > div {
        margin: 0 1.05rem; }
      .Instructor > div:nth-child(1), .Instructor--flip > div:nth-child(1) {
        -webkit-flex-basis: calc(37.5% - 2.1rem);
            -ms-flex-preferred-size: calc(37.5% - 2.1rem);
                flex-basis: calc(37.5% - 2.1rem); }
      .Instructor > div:nth-child(2), .Instructor--flip > div:nth-child(2) {
        -webkit-flex-basis: calc(62.5% - 2.1rem);
            -ms-flex-preferred-size: calc(62.5% - 2.1rem);
                flex-basis: calc(62.5% - 2.1rem); } }

@media all and (max-width: 31.1875em) {
  .Instructor__title,
  .Instructor__name,
  .Instructor__pos {
    text-align: center; } }

.Instructor--flip > div:nth-child(1) {
  -webkit-order: 3;
      -ms-flex-order: 3;
          order: 3; }

.Instructor--flip > div:nth-child(2) {
  -webkit-order: 0;
      -ms-flex-order: 0;
          order: 0;
  text-align: right; }

.Instructor__img {
  padding-top: 0.35rem; }

.cuppage-container {
  overflow-x: hidden;
  margin-bottom: 0; }

.cuppage {
  margin-top: 1.05rem;
  margin-left: -2px;
  margin-right: -2px;
  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), url("../images/collage.jpg");
  background-size: cover;
  background-position: 50% 100%;
  text-shadow: 0 1px 0 #000;
  font-weight: bold;
  height: 0;
  padding-bottom: 56.7627494%; }

.Modal {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -1;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
  background: transparent;
  transition: background-color 0.25s ease-in, z-index 0s 0.25s linear;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  font-size: 0.96rem; }
  @media all and (min-width: 680px) {
    .Modal {
      font-size: 0.84417rem; } }

.Modal.is-shown {
  z-index: 40;
  background: rgba(0, 0, 0, 0.7);
  transition: background-color 0.25s ease-out, z-index 0s 0s linear; }

.Modal__content {
  max-width: 25rem;
  position: relative;
  padding: 2.8rem;
  background: #fff;
  opacity: 0;
  box-shadow: 0 0 1rem #000;
  transition: opacity 0.25s ease-in, -webkit-transform 0.25s ease-in;
  transition: opacity 0.25s ease-in, transform 0.25s ease-in;
  transition: opacity 0.25s ease-in, transform 0.25s ease-in, -webkit-transform 0.25s ease-in;
  -webkit-transform: scale(0.9, 0.9);
          transform: scale(0.9, 0.9); }
  .Modal__content h2 {
    margin-top: 0; }
  .Modal__content p {
    margin-top: 0.7rem; }

.Modal.is-shown .Modal__content {
  opacity: 1;
  transition: opacity 0.25s ease-out, -webkit-transform 0.25s ease-out;
  transition: opacity 0.25s ease-out, transform 0.25s ease-out;
  transition: opacity 0.25s ease-out, transform 0.25s ease-out, -webkit-transform 0.25s ease-out;
  -webkit-transform: scale(1, 1);
          transform: scale(1, 1); }

.Modal__close {
  position: absolute;
  top: 1.05rem;
  right: 1.05rem;
  width: 1.4rem;
  height: 1.4rem;
  cursor: pointer; }

form {
  display: block; }
  form label {
    display: block;
    margin-top: 1.05rem; }
  form span {
    display: block;
    margin-bottom: 0.175rem;
    font-size: 0.96rem; }
    @media all and (min-width: 680px) {
      form span {
        font-size: 0.84417rem; } }
  form input {
    display: block;
    border: 1px solid #ddd;
    font-size: 0.96rem;
    padding: 0.5em 0.75em;
    width: 100%; }
    @media all and (min-width: 680px) {
      form input {
        font-size: 0.84417rem; } }

.form__success {
  display: none; }

.form__error {
  font-size: 0.8rem;
  color: #ff414a; }
  @media all and (min-width: 680px) {
    .form__error {
      font-size: 0.75019rem; } }

.form__success.is-shown {
  display: block; }

.u-text-center {
  text-align: center !important; }

.u-text-right {
  text-align: right !important; }

@media all and (max-width: 21.8125em) {
  .u-hide-st-tiny {
    display: none !important; } }

@media all and (min-width: 21.875em) {
  .u-hide-tiny {
    display: none !important; } }

@media all and (max-width: 31.1875em) {
  .u-hide-st-small {
    display: none !important; } }

@media all and (min-width: 31.25em) {
  .u-hide-small {
    display: none !important; } }

@media all and (max-width: 42.4375em) {
  .u-hide-st-med {
    display: none !important; } }

@media all and (min-width: 42.5em) {
  .u-hide-med {
    display: none !important; } }

@media all and (max-width: 56.1875em) {
  .u-hide-st-large {
    display: none !important; } }

@media all and (min-width: 56.25em) {
  .u-hide-large {
    display: none !important; } }

@media all and (max-width: 59.3125em) {
  .u-hide-st-large-with-pad {
    display: none !important; } }

@media all and (min-width: 59.375em) {
  .u-hide-large-with-pad {
    display: none !important; } }

@media all and (max-width: 68.6875em) {
  .u-hide-st-wide {
    display: none !important; } }

@media all and (min-width: 68.75em) {
  .u-hide-wide {
    display: none !important; } }

@media all and (max-width: 93.6875em) {
  .u-hide-st-mega {
    display: none !important; } }

@media all and (min-width: 93.75em) {
  .u-hide-mega {
    display: none !important; } }

/*# sourceMappingURL=data:application/json;base64, */
