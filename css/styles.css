/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

input,
textarea {
  box-sizing: border-box; }

label {
  box-sizing: border-box; }

/*! HiDPI v2.0.1 | MIT License | git.io/hidpi */
@font-face {
  font-family: 'Ampersand';
  src: local("Baskerville-Italic"), local("GoudyOldStyleT-Italic"), local("Palatino-Italic"), local("Garamond-Italic");
  unicode-range: U+26; }

html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

h1, h2, h3, h4, h5, h6, ul, li, p, blockquote {
  margin: 0;
  padding: 0; }

li {
  list-style: none; }

input,
textarea,
button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border-radius: 0;
  outline: 0;
  border: 0; }
  input:hover, input:active, input:focus,
  textarea:hover,
  textarea:active,
  textarea:focus,
  button:hover,
  button:active,
  button:focus {
    outline: 0;
    border: 0; }

embed,
iframe,
img,
object,
video {
  max-width: 100%; }

img {
  height: auto;
  width: auto; }

html {
  font-size: 100%;
  line-height: 1.3125em; }

html {
  text-rendering: optimizeLegibility;
  font-feature-settings: "kern" 1; }

p + p,
p + img,
img + p {
  margin-top: 1.3125rem; }

article h2 + p {
  margin-top: 1em; }

article * + h2 {
  margin-top: 2em; }

article ul,
article ol {
  margin-left: 1em; }

article li + li {
  margin-top: 0.65625rem; }

article ol li {
  list-style-type: decimal; }

article ul li {
  list-style-type: disc; }

.btn, .btn--highlight, .btn--disabled {
  display: inline-block;
  padding: 0.75em 1.5em;
  background: #E74840;
  color: white;
  font-family: 'Open Sans Condensed';
  font-size: 1rem;
  letter-spacing: 0.05em;
  font-weight: bold;
  text-decoration: none;
  text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.4);
  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.2);
  transition: all 0.15s ease;
  text-transform: uppercase; }
  .btn:hover, .btn--highlight:hover, .btn--disabled:hover, .btn:active, .btn--highlight:active, .btn--disabled:active, .btn:focus, .btn--highlight:focus, .btn--disabled:focus {
    background: #ed736d;
    color: white; }

.btn--highlight {
  background: #ed706f;
  color: rgba(255, 255, 255, 0.85); }
  .btn--highlight:hover, .btn--highlight:active, .btn--highlight:focus {
    background: #37474F;
    color: white; }

.btn--disabled {
  background: #aaa;
  color: rgba(255, 255, 255, 0.7);
  cursor: default; }
  .btn--disabled:hover, .btn--disabled:active, .btn--disabled:focus {
    background: #aaa;
    color: rgba(255, 255, 255, 0.7); }

input {
  background-color: white;
  height: calc(3em + 2px);
  padding: 1em;
  font-size: 1em;
  border: 1px solid #cccccc;
  border-radius: 0;
  transition: all 0.2s ease-out;
  box-shadow: none;
  resize: none;
  outline: none;
  color: #20172c; }
  input:hover {
    border: 1px solid #cccccc; }
  input:focus, input:active {
    border: 1px solid #E74840; }
    input:focus + label:before, input:active + label:before {
      color: #E74840; }
  input + label {
    display: block;
    font-size: 1em;
    height: 3em;
    line-height: 3em;
    margin-top: calc(-3em - 1px);
    margin-bottom: 1em;
    cursor: text; }
    input + label:before {
      content: attr(placeholder);
      display: inline-block;
      color: #999999;
      margin: 0 calc(1em + 2px);
      white-space: nowrap;
      transition-property: color, -webkit-transform;
      transition-property: transform, color;
      transition-property: transform, color, -webkit-transform;
      transition-duration: 0.2s;
      transition-delay: 0;
      transition-timing-function: ease-out;
      -webkit-transform-origin: left center;
      transform-origin: left center; }
  input:focus + label:before, input.active + label:before, input:valid + label:before {
    background: white;
    line-height: 1;
    padding: 0 1.5px;
    -webkit-transform: translateY(-1.5em) translateY(-0.5px) scale(0.8, 0.8);
    transform: translateY(-1.5em) translateY(-0.5px) scale(0.8, 0.8); }
  input:valid {
    border: 1px solid #23a045; }
    input:valid + label:before {
      content: attr(alt);
      color: #23a045; }

html {
  font-family: "Open Sans", sans-serif; }

body {
  text-rendering: optimizeLegibility; }

h1,
h2,
h3,
h4,
h5,
h6 {
  display: block; }

h1 {
  margin-bottom: 0.65625rem;
  font-size: 1.5em;
  font-weight: normal;
  line-height: 3.9375rem; }

h2 {
  font-weight: 400; }
  @media all and (min-width: 40em) {
    h2 {
      font-size: 1.33333em;
      line-height: 42px;
      line-height: 2.625rem; } }

h3 {
  font-size: 1.125em;
  font-weight: normal; }

h4 {
  font-weight: normal; }

em {
  font-style: italic; }

pre {
  white-space: pre; }

.o-cursive {
  font-family: "Sue Ellen Francisco", cursive; }

.o-italic {
  font-weight: bold;
  font-style: italic;
  text-align: center;
  font-family: "Sue Ellen Francisco", cursive; }

a {
  color: #37474F;
  text-decoration: underline; }
  a:hover, a:active, a:focus {
    color: #ed706f;
    text-decoration: none; }

p {
  line-height: 1.4; }

.o-block__title-2 {
  font-family: 'Open Sans Condensed';
  font-weight: 700; }

html {
  font-size: 100%;
  line-height: 1.4; }
  @media all and (min-width: 640px) {
    html {
      font-size: 100%;
      line-height: 1.4; } }
  @media all and (min-width: 1000px) {
    html {
      font-size: 131.25%; } }

.c-logo, .Logo--hero {
  margin: 1.3125rem 0;
  line-height: 1.4;
  text-transform: uppercase;
  text-align: center;
  font-weight: bold;
  color: white;
  font-size: 0.5rem;
  text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.4); }
  @media all and (min-width: 62.5em) {
    .c-logo, .Logo--hero {
      font-size: 0.5rem; } }
  .c-logo .c-logo__devfest, .Logo--hero .c-logo__devfest {
    font-size: 2.75em;
    letter-spacing: 0.1em;
    display: inline-block;
    vertical-align: middle; }
  .c-logo .c-logo__2015, .Logo--hero .c-logo__2015 {
    font-size: 2.5em;
    line-height: 1.1;
    letter-spacing: 0.1em;
    display: inline-block;
    vertical-align: middle; }

.Logo--hero {
  font-size: 15.68px;
  width: 19.13265em;
  height: 19.13265em;
  padding-top: 4.46429em;
  padding-left: .125em;
  border-radius: 9.56633em;
  border: 0.38265em solid #288ae2;
  box-shadow: 0 0 0 0.57398em white, 0 0 0 1.14796em #288ae2, 0 0 1.14796em 1.27551em rgba(255, 255, 255, 0.2);
  background: radial-gradient(#3e96e5, #288ae2);
  -webkit-transform: scale(0.88);
          transform: scale(0.88);
  position: relative;
  overflow: hidden;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -webkit-animation: none;
  animation: openup 0.8s cubic-bezier(0.88, -0.03, 0.63, 1.52); }
  .Logo--hero:after, .Logo--hero:before {
    content: "";
    position: absolute;
    width: 25.5102em;
    background: linear-gradient(to bottom, #288ae2 50%, white 100%);
    height: 11.47959em;
    top: -8.29082em;
    left: -3.18878em;
    -webkit-transform: rotateZ(-9deg);
            transform: rotateZ(-9deg);
    border-bottom: 0.57398em solid white;
    box-shadow: inset 0 0 0 0.57398em #288ae2;
    -webkit-animation: none;
    animation: openup_top 0.8s cubic-bezier(0.88, -0.03, 0.63, 1.52); }
  .Logo--hero:after {
    background: linear-gradient(to top, #288ae2 50%, white 100%);
    top: auto;
    bottom: -8.29082em;
    border-top: 0.57398em solid white;
    border-bottom: 0;
    -webkit-animation: none;
    animation: openup_bottom 0.8s cubic-bezier(0.88, -0.03, 0.63, 1.52); }
  .Logo--hero .c-logo__devfest,
  .Logo--hero .c-logo__2015 {
    display: block; }
  .Logo--hero .c-logo__singapore {
    padding: 0.66964em 0;
    letter-spacing: 1.1em; }

@-webkit-keyframes openup {
  0% {
    overflow: hidden;
    -webkit-transform: scale(0.5);
            transform: scale(0.5); }
  100% {
    overflow: hidden;
    -webkit-transform: scale(0.88);
            transform: scale(0.88); } }

@keyframes openup {
  0% {
    overflow: hidden;
    -webkit-transform: scale(0.5);
            transform: scale(0.5); }
  100% {
    overflow: hidden;
    -webkit-transform: scale(0.88);
            transform: scale(0.88); } }

@-webkit-keyframes openup_top {
  0% {
    -webkit-transform: translate(0, 96px) rotateZ(0);
            transform: translate(0, 96px) rotateZ(0); }
  100% {
    -webkit-transform: translate(0, 0) rotateZ(-9deg);
            transform: translate(0, 0) rotateZ(-9deg); } }

@keyframes openup_top {
  0% {
    -webkit-transform: translate(0, 96px) rotateZ(0);
            transform: translate(0, 96px) rotateZ(0); }
  100% {
    -webkit-transform: translate(0, 0) rotateZ(-9deg);
            transform: translate(0, 0) rotateZ(-9deg); } }

@-webkit-keyframes openup_bottom {
  0% {
    -webkit-transform: translate(0, -96px) rotateZ(0deg);
            transform: translate(0, -96px) rotateZ(0deg); }
  100% {
    -webkit-transform: translate(0, 0) rotateZ(-9deg);
            transform: translate(0, 0) rotateZ(-9deg); } }

@keyframes openup_bottom {
  0% {
    -webkit-transform: translate(0, -96px) rotateZ(0deg);
            transform: translate(0, -96px) rotateZ(0deg); }
  100% {
    -webkit-transform: translate(0, 0) rotateZ(-9deg);
            transform: translate(0, 0) rotateZ(-9deg); } }

body {
  background: #288ae2; }

.Hero {
  background-color: #288ae2;
  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.17), rgba(0, 0, 0, 0.17)), url("../images/hero-4.jpg");
  background-size: cover;
  background-position: center center;
  height: 100vh;
  width: 100vw;
  color: white;
  font-size: 2.5vh; }
  .Hero:before {
    content: '';
    position: absolute;
    top: -20vh;
    left: 0;
    right: 0;
    width: 40vh;
    height: 40vh;
    background: #288ae2;
    margin: auto;
    border-radius: 100%;
    border: 1px solid #1a70bd;
    -webkit-filter: drop-shadow(0 0 5px rgba(0, 0, 0, 0.5));
            filter: drop-shadow(0 0 5px rgba(0, 0, 0, 0.5)); }
  .Hero .btn .spinner.is-hidden, .Hero .btn--highlight .spinner.is-hidden, .Hero .btn--disabled .spinner.is-hidden {
    border-color: transparent; }
    .Hero .btn .spinner.is-hidden:before, .Hero .btn--highlight .spinner.is-hidden:before, .Hero .btn--disabled .spinner.is-hidden:before, .Hero .btn .spinner.is-hidden:after, .Hero .btn--highlight .spinner.is-hidden:after, .Hero .btn--disabled .spinner.is-hidden:after {
      border-color: inherit; }

.Hero__right-overlay {
  display: none; }

.Hero__bottom--mobile {
  display: none; }

.Hero__content {
  position: relative;
  z-index: 40;
  text-shadow: 0 0 50px rgba(0, 0, 0, 0.5); }

.Hero__title {
  font-family: 'Fira Sans';
  letter-spacing: 0.005em;
  line-height: 1.1;
  text-shadow: 0 0 0.05em black;
  font-weight: 700;
  letter-spacing: -0.01em; }

.msg {
  display: inline-block;
  padding: 0.75em 1.5em;
  background: white;
  border: 1px solid transparent;
  color: black; }

@media all and (orientation: portrait) {
  .Hero__logo {
    position: absolute;
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;
    font-size: 0.6em;
    box-shadow: 0 0 0 15px white, 0 0 0 30px #288ae2, 0 0 38.33333px 28.33333px rgba(0, 0, 0, 0.15); }
  .Hero__content {
    padding-top: 15em;
    text-align: center; }
  .Hero__title {
    font-size: 2em;
    line-height: 1.18;
    padding-left: 0.8rem;
    padding-right: 0.8rem;
    text-shadow: 0 1px 0 black, 0 0 1em black; }
    .Hero__title span {
      display: block; }
  .Hero__desc p {
    margin-top: 0.25em; }
  .Hero__desc p + p {
    margin-top: 0.75em; }
  .Hero__desc .btn, .Hero__desc .btn--highlight, .Hero__desc .btn--disabled {
    font-size: inherit; }
  .Hero__cta {
    display: none; }
  .Hero__bottom--mobile {
    display: block;
    position: relative;
    margin-top: -5vh;
    background: #288ae2;
    -webkit-filter: drop-shadow(0 -0.3em 0.3em rgba(0, 0, 0, 0.2));
            filter: drop-shadow(0 -0.3em 0.3em rgba(0, 0, 0, 0.2)); }
    .Hero__bottom--mobile:before {
      content: '';
      position: absolute;
      z-index: 50;
      display: block;
      width: 100%;
      height: 0;
      margin-top: -49.8%;
      padding-bottom: 50%;
      background-image: url("../images/out-curve-vertical.svg");
      background-size: contain;
      background-repeat: no-repeat; }
  .Hero__cta--mobile {
    text-align: center;
    padding-top: 2em;
    padding-bottom: 3em;
    color: white; }
    .Hero__cta--mobile .subscribeForm > * {
      margin-top: 0.75em;
      display: block;
      margin-right: auto;
      margin-left: auto; }
    .Hero__cta--mobile a {
      color: white; }
    .Hero__cta--mobile .Hero__link {
      margin-top: 1em; } }

@media all and (orientation: landscape) {
  .Hero {
    position: relative;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-align-items: center;
        -ms-flex-align: center;
            align-items: center;
    font-size: 1vw; }
    .Hero:before {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      left: -15vw;
      right: 0;
      width: 30vw;
      height: 30vw;
      margin: auto 0; }
  .Hero__right-overlay {
    display: block;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0; }
    .Hero__right-overlay:before, .Hero__right-overlay:after {
      content: '';
      position: absolute; }
    .Hero__right-overlay:before {
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      background-image: url("../images/out-curve.svg");
      background-repeat: no-repeat;
      background-position: calc(100% - 9.9em) 0%;
      background-size: contain;
      -webkit-filter: drop-shadow(0 0 5px rgba(0, 0, 0, 0.5));
              filter: drop-shadow(0 0 5px rgba(0, 0, 0, 0.5)); }
    .Hero__right-overlay:after {
      top: 0;
      bottom: 0;
      right: 0;
      width: 10em;
      background: #288ae2; }
  .Hero__logo {
    position: absolute;
    top: 0;
    bottom: 0;
    margin: auto;
    z-index: 20;
    border-radius: 100%;
    font-size: inherit;
    -webkit-flex-shrink: 0;
        -ms-flex-negative: 0;
            flex-shrink: 0;
    margin-left: 3em;
    box-shadow: 0 0 0 0.57398em white, 0 0 0 1.14796em #288ae2, 0 0 5px 1.27551em rgba(0, 0, 0, 0.15); }
  .Hero__content {
    position: relative;
    z-index: 40;
    margin-left: 26em;
    color: white;
    text-shadow: 0 1px 0 black, 0 0 50px rgba(0, 0, 0, 0.5); }
  .Hero__title {
    position: relative;
    font-size: 4em;
    text-shadow: 0 0 0.1em black; }
  .Hero__desc {
    position: absolute; } }
  @media all and (orientation: landscape) and (min-width: 112.5em) {
    .Hero__desc {
      font-size: 0.8vw; } }

@media all and (orientation: landscape) {
    .Hero__desc p {
      margin-top: -0.25em; }
    .Hero__desc p + p {
      margin-top: 0.75em; }
    .Hero__desc .btn, .Hero__desc .btn--highlight, .Hero__desc .btn--disabled {
      font-size: inherit; }
  .Hero__cta {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    color: white;
    font-family: 'Fira Sans';
    padding: 1.5em;
    font-size: 0.8rem; } }
  @media all and (orientation: landscape) and (min-width: 640px) {
    .Hero__cta {
      font-size: 0.75019rem; } }

@media all and (orientation: landscape) {
    .Hero__cta > div {
      float: right; }
    .Hero__cta p {
      font-size: 0.85em;
      margin-bottom: 0.5em;
      text-transform: uppercase;
      text-shadow: 0 0 2px rgba(0, 0, 0, 0.7); }
    .Hero__cta .btn, .Hero__cta .btn--highlight, .Hero__cta .btn--disabled {
      font-size: inherit; }
    .Hero__cta a {
      color: white; }
      .Hero__cta a:hover, .Hero__cta a:active, .Hero__cta a:focus {
        text-decoration: none; }
  .subscribeForm,
  .msg,
  .Hero__link {
    display: inline-block;
    vertical-align: middle; }
  .subscribeForm > * + * {
    margin-left: 0.125em; }
  .Hero__link {
    margin-left: 0.25em; } }

@keyframes spinner {
  to {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg); } }

@-webkit-keyframes spinner {
  to {
    -webkit-transform: rotate(360deg); } }

.spinner {
  position: relative;
  width: 1em;
  height: 1em; }

.spinner:before {
  content: 'Loading...';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 1.5em;
  height: 1.5em;
  margin-top: -10px;
  margin-left: -10px; }

.spinner:not(:required):before {
  content: '';
  border-radius: 100%;
  border-top: 3px solid white;
  border-right: 3px solid transparent;
  animation: spinner .6s linear infinite;
  -webkit-animation: spinner .6s linear infinite;
  -webkit-animation-play-state: play;
          animation-play-state: play; }

.spinner.play:not(:required):before {
  -webkit-animation-play-state: running;
          animation-play-state: running; }

@media all and (max-width: 19.9375em) {
  .u-hide-st-small {
    display: none !important; } }

@media all and (min-width: 20em) {
  .u-hide-small {
    display: none !important; } }

@media all and (max-width: 39.9375em) {
  .u-hide-st-med {
    display: none !important; } }

@media all and (min-width: 40em) {
  .u-hide-med {
    display: none !important; } }

@media all and (max-width: 62.4375em) {
  .u-hide-st-large {
    display: none !important; } }

@media all and (min-width: 62.5em) {
  .u-hide-large {
    display: none !important; } }

@media all and (max-width: 87.4375em) {
  .u-hide-st-wide {
    display: none !important; } }

@media all and (min-width: 87.5em) {
  .u-hide-wide {
    display: none !important; } }

@media all and (max-width: 112.4375em) {
  .u-hide-st-mega {
    display: none !important; } }

@media all and (min-width: 112.5em) {
  .u-hide-mega {
    display: none !important; } }

@media all and (orientation: portrait) {
  .u-hide-portrait {
    display: none !important; } }

@media all and (orientation: landscape) {
  .u-hide-landscape {
    display: none !important; } }

.is-invisible {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  border: 0; }

/*# sourceMappingURL=data:application/json;base64, */
