@charset "UTF-8";
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

input,
textarea {
  box-sizing: border-box; }

label {
  box-sizing: border-box; }

/*! HiDPI v2.0.1 | MIT License | git.io/hidpi */
@font-face {
  font-family: 'Ampersand';
  src: local("Baskerville-Italic"), local("GoudyOldStyleT-Italic"), local("Palatino-Italic"), local("Garamond-Italic");
  unicode-range: U+26; }

html {
  box-sizing: border-box; }

*,
*:before,
*:after {
  box-sizing: inherit; }

h1,
h2,
h3,
h4,
h5,
h6,
ul,
li,
p,
blockquote {
  padding: 0;
  margin: 0; }

h1,
h2,
h3,
h4,
h5,
h6 {
  display: block; }

li {
  list-style: none; }

input,
textarea,
button {
  border: 0;
  border-radius: 0;
  outline: none;
  appearance: none;
  -moz-appearance: none;
  -webkit-appearance: none; }
  input:hover, input:active, input:focus,
  textarea:hover,
  textarea:active,
  textarea:focus,
  button:hover,
  button:active,
  button:focus {
    outline: none; }

embed,
iframe,
img,
object,
video {
  max-width: 100%; }

table {
  width: 100%;
  table-layout: fixed; }

dt,
dd {
  display: inline; }

dd + dt:before {
  white-space: pre;
  content: '\A'; }

dd + dd:before {
  content: ', '; }

figure {
  max-width: 100%;
  margin: auto; }
  figure > img {
    display: block;
    max-width: inherit; }

p + *,
* + p {
  margin-top: 1.05rem; }

main ul,
main ol {
  padding-left: 1.7rem; }

main li + li {
  margin-top: 0.35rem; }

main ul li {
  list-style-type: disc; }

main ol li {
  list-style-type: decimal; }

html {
  font-size: 137.5%;
  line-height: 1.4;
  font-family: "acumin-pro-semi-condensed", Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 500;
  color: #111;
  text-rendering: optimizeLegibility;
  font-variant-ligatures: common-ligatures discretionary-ligatures historical-ligatures; }

.h1,
.h2,
.h3 {
  font-family: "Ampersand", "acumin-pro-extra-condensed", Helvetica, Arial, sans-serif; }

.h1 {
  font-size: 2.44141em;
  line-height: 2.8rem;
  color: #000; }

.h2 {
  font-size: 1.95312em;
  line-height: 1.3;
  font-weight: 500;
  color: #484848; }

.h3 {
  font-size: 1.25em;
  line-height: 1.3; }

strong {
  font-weight: bold; }

em {
  font-style: italic; }

pre {
  white-space: pre;
  -moz-tab-size: 2;
       tab-size: 2; }

.hljs-comment {
  color: #969896; }

.hljs-variable,
.hljs-attribute,
.hljs-tag,
.hljs-regexp,
.ruby .hljs-constant,
.xml .hljs-tag .hljs-title,
.xml .hljs-pi,
.xml .hljs-doctype,
.lang-html .hljs-doctype,
.lang-html .hljs-title,
.lang-css .hljs-id,
.lang-css .hljs-class,
.lang-css .hljs-pseudo,
.lang-scss .hljs-id,
.lang-scss .hljs-class,
.lang-scss .hljs-pseudo {
  color: #c66; }

.hljs-number,
.hljs-preprocessor,
.hljs-pragma,
.hljs-built_in,
.hljs-literal,
.hljs-params,
.hljs-constant,
.lang-css .hljs-value,
.lang-scss .hljs-value,
.lang-scss .hljs-at_rule + .hljs-string {
  color: #de935f; }

.ruby .hljs-class .hljs-title,
.lang-css .hljs-attribute,
.lang-scss .hljs-attribute {
  color: #f0c674; }

.hljs-string,
.hljs-value,
.hljs-inheritance,
.hljs-header,
.hljs-name,
.ruby .hljs-symbol,
.xml .hljs-cdata {
  color: #b5bd68; }

.hljs-title,
.lang-css .hljs-hexcolor,
.lang-scss .hljs-hexcolor {
  color: #8abeb7; }

.hljs-function,
.python .hljs-decorator,
.python .hljs-title,
.ruby .hljs-function .hljs-title,
.ruby .hljs-title .hljs-keyword,
.perl .hljs-sub,
.lang-javascript .hljs-title,
.lang-js .hljs-title,
.coffeescript .hljs-title {
  color: #81a2be; }

.hljs-keyword,
.lang-scss .hljs-at_rule,
.lang-javascript .hljs-function,
.lang-js .hljs-function {
  color: #b294bb; }

.lang-bash .hljs-built_in {
  color: #c5c8c6; }

pre code {
  display: block;
  color: #c5c8c6;
  -webkit-text-size-adjust: none;
      -ms-text-size-adjust: none;
          text-size-adjust: none; }

.lang-javascript .xml,
.lang-js .xml,
.tex .hljs-formula,
.xml .lang-javascript,
.xml .vbscript,
.xml .lang-css,
.xml .lang-scss,
.xml .hljs-cdata {
  opacity: 0.5; }

main {
  margin-top: 4.2rem;
  margin-bottom: 4.2rem; }

.wrap {
  max-width: 38em;
  margin: auto; }

.wrap > *:not(header) {
  max-width: 30em; }

section {
  margin-top: 2.8rem;
  margin-bottom: 0; }

.divider {
  height: 0.7rem;
  width: 4.2rem;
  background: black;
  margin-top: 1.4rem;
  margin-bottom: 1.4rem; }

.speaker .container {
  margin-top: 0.7rem; }
  .speaker .container:after {
    display: table;
    clear: both;
    content: ' '; }

.speaker .left {
  float: left;
  width: 9.8rem;
  margin-top: 0.35rem; }

.speaker .right {
  padding-left: 11.2rem; }

.cta {
  background: #E6e6e6;
  padding: 2.1rem 3.15rem;
  border: 1px solid #ddd; }
  .cta p {
    font-size: 1.25em;
    line-height: 1.3; }

form .input-group {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex; }

form input {
  font-size: 0.8em;
  width: 100%;
  padding: 0.75em;
  -webkit-flex-grow: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
  border: 1px solid #ddd; }

form input:nth-child(even) {
  margin-left: 1.05rem; }

button {
  color: white;
  display: block;
  width: 100%;
  text-align: center;
  padding: 0.6em;
  margin-top: 1.05rem;
  font-weight: bold;
  background: #0bb669; }
  button:hover, button:active, button:focus {
    background: #0aa760; }

.cta + .h1 {
  margin-top: 3.15rem;
  margin-bottom: 1.05rem; }

blockquote {
  color: #666;
  font-style: italic;
  margin-left: 3.5rem; }
  blockquote q {
    display: inline-block; }

.testimonial {
  position: relative;
  padding-top: 1.4rem; }
  .testimonial:before {
    content: "“";
    font-family: "Didot";
    font-size: 5.96046em;
    position: absolute;
    top: 0;
    color: #444; }

cite {
  display: inline-block; }

/*# sourceMappingURL=data:application/json;base64, */
